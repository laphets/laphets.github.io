(window.webpackJsonp=window.webpackJsonp||[]).push([[124],{121:function(n,t,e){"use strict";e.r(t);var i=e(2),s=Object(i.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"引子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#引子","aria-hidden":"true"}},[n._v("#")]),n._v(" 引子")]),n._v(" "),e("p",[n._v("网络流的题目大概在半年前就开始做了，然而题解却一直拖欠着没写，我会在以后（如果有空？）一一补上\n网络流问题主要包括最大流，费用流等等，算法很多，这些我用的主要就是蓝书里的Dinic和ISAP，欢迎来看。")]),n._v(" "),e("h2",{attrs:{id:"t1-飞行员配对方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#t1-飞行员配对方案","aria-hidden":"true"}},[n._v("#")]),n._v(" T1 飞行员配对方案")]),n._v(" "),e("h3",{attrs:{id:"题解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题解","aria-hidden":"true"}},[n._v("#")]),n._v(" 题解")]),n._v(" "),e("p",[n._v("二分图最大匹配。设X集合与Y集合，中间连一条流为1的边，另建立一个超级源S和超级汇T，S与X集连一条流为1的有向边，Y集与T同样连一条流为1的有向边，最后跑一边Dinic，最大流即为最大匹配数，而最小割则是其对应方案。\n总结：二分图最大匹配问题除了可以用匈牙利算法求解外还可以转化成最大流来做。")]),n._v(" "),e("h3",{attrs:{id:"代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码","aria-hidden":"true"}},[n._v("#")]),n._v(" 代码")]),n._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nconst int maxn=500+10;\nconst int INF=0x7f7f7f;\nstruct Edge\n{\n    int from,to,cap,flow;\n};\nint m,n,u,v,s,t;\nint d[maxn],cur[maxn];\nbool vis[maxn];\nvector<Edge>edges;\nvector<int>G[maxn];\ninline void Add_edge(int from,int to,int cap)\n{\n    edges.push_back((Edge){from,to,cap,0});\n    edges.push_back((Edge){to,from,0,0});\n    int m=edges.size();\n    G[from].push_back(m-2);\n    G[to].push_back(m-1);\n}\nbool BFS()\n{\n    memset(vis,0,sizeof(vis));\n    queue<int>q;\n    q.push(s);\n    vis[s]=true;\n    d[s]=0;\n    while(!q.empty())\n    {\n        int x=q.front();q.pop();\n        for(int i=0;i<G[x].size();i++)\n        {\n            Edge &e=edges[G[x][i]];\n            if(!vis[e.to]&&e.cap>e.flow)\n            {\n                vis[e.to]=true;\n                d[e.to]=d[x]+1;\n                q.push(e.to);\n            }\n        }\n    }\n    return vis[t];\n}\nint DFS(int x,int a)\n{\n    if(x==t||a==0)\n        return a;\n    int flow=0,f;\n    for(int &i=cur[x];i<G[x].size();i++)\n    {\n        Edge &e=edges[G[x][i]];\n        if(d[x]+1==d[e.to]&&(f=DFS(e.to,min(a,e.cap-e.flow))>0))\n        {\n            e.flow+=f;\n            edges[G[x][i]^1].flow-=f;\n            flow+=f;\n            a-=f;\n            if(a==0)\n                break;\n        }\n    }\n    return flow;\n}\nint Maxflow(int s,int t)\n{\n    //this->s=s,this->t=t;\n    int flow=0;\n    while(BFS())\n    {\n        memset(cur,0,sizeof(cur));\n        flow+=DFS(s,INF);\n    }\n    return flow;\n}\nint main()\n{\n//  freopen("1.sb","r",stdin);\n    scanf("%d%d",&m,&n);\n    while(~scanf("%d%d",&u,&v)&&u!=-1&&v!=-1)\n        Add_edge(u,v,1);\n    //s->0 t->n+1\n    s=0,t=n+1;\n    for(int i=1;i<=m;i++)\n        Add_edge(s,i,1);\n    for(int i=m+1;i<=n;i++)\n        Add_edge(i,t,1);\n    //cout<<1<<endl;\n    printf("%d",Maxflow(s,t));\n    return 0;\n}\n')])])])])},[],!1,null,null,null);t.default=s.exports}}]);