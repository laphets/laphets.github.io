(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{409:function(t,n,e){"use strict";e.r(n);var a=e(1),s=Object(a.a)({},function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"declaration-of-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#declaration-of-function","aria-hidden":"true"}},[t._v("#")]),t._v(" Declaration of function")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// function prototype\ndouble pam(int);\n\n// fucntion declaration\ndouble (*pf)(int);  // pf points to a function which takes int argument and returns a double\n")])])]),e("blockquote",[e("p",[t._v("one tip is that, we can write a prototype of a function, and replace the name with a pointer")])]),t._v(" "),e("p",[e("strong",[t._v("And we may need to add parentheses")])]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("double (*pf)(int);\n\ndouble* pf(int);  // returns a pointer to double\n")])])]),e("h3",{attrs:{id:"to-invoke-a-function"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#to-invoke-a-function","aria-hidden":"true"}},[t._v("#")]),t._v(" To invoke a function")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// Two ways\n(*pf)(1);\n\n\n// or\npf(1)\n")])])]),e("p",[t._v("Holy syntax!")]),t._v(" "),e("p",[t._v("There comes a sample")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('double first(double arg);\ndouble second(double arg);\n\nvoid estimate(double (*pf)(double a));\n\nint main() {\n\n    estimate(first);\n    estimate(second);\n    return 0;\n}\n\ndouble first(double a) {\n    printf("First %lf\\n", a);\n    return 0;\n}\n\ndouble second(double a) {\n    printf("Second %lf\\n", a);\n    return 0;\n}\nvoid estimate(double (*pf)(double)) {\n    (*pf)(1);\n}\n')])])]),e("p",[t._v("In c++11, we have")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("int a(int);\n\nint main() {\n  auto b = a;\n}\n")])])]),e("h3",{attrs:{id:"using-typedef"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-typedef","aria-hidden":"true"}},[t._v("#")]),t._v(" Using typedef")]),t._v(" "),e("div",{staticClass:"language-c++ extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("typedef const double *(*p_fun)(const double *, int); \np_fun p1 = f1; // p1 points to the f1() function\n")])])])])},[],!1,null,null,null);n.default=s.exports}}]);