(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{411:function(a,e,t){"use strict";t.r(e);var i=t(1),n=Object(i.a)({},function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"auto"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#auto","aria-hidden":"true"}},[a._v("#")]),a._v(" auto")]),a._v(" "),t("p",[a._v("auto induce type")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("auto a = 1\nauto it = something.begin()\n")])])]),t("h3",{attrs:{id:"header-file-management"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#header-file-management","aria-hidden":"true"}},[a._v("#")]),a._v(" Header file management")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#ifndef SB_H_\n#define SB_H_\n...\n#endif\n")])])]),t("h3",{attrs:{id:"initializing-static-variable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#initializing-static-variable","aria-hidden":"true"}},[a._v("#")]),a._v(" Initializing Static Variable")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("#include <cmath> \nint x;  // zero-initialization\nint y = 5;  // constant-expression initialization\nlong z = 13 * 13;   // constant-expression initialization\nconst double pi = 4.0 * atan(1.0); // dynamic initialization\n")])])]),t("p",[a._v("For constant initialization, it's initialized when complie.")]),a._v(" "),t("h3",{attrs:{id:"odr-p463"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#odr-p463","aria-hidden":"true"}},[a._v("#")]),a._v(" ODR P463")]),a._v(" "),t("p",[a._v("one definition rule\nThere is two kind:")]),a._v(" "),t("ul",[t("li",[a._v("defining declaration(definition) - containing storage allocate")])]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("double up;\nextern int cats = 20;\n")])])]),t("ul",[t("li",[a._v("referencing declaration(declaration) - not contain storage allocate")])]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("extern int cat; // use extern and has no initialization\n")])])]),t("h3",{attrs:{id:"access-global-variable-when-shadowing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#access-global-variable-when-shadowing","aria-hidden":"true"}},[a._v("#")]),a._v(" Access global variable when shadowing")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("::warming\n")])])]),t("h3",{attrs:{id:"some-rule"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#some-rule","aria-hidden":"true"}},[a._v("#")]),a._v(" Some rule?")]),a._v(" "),t("p",[a._v("You can use an external variable to share data among different parts of a multifile program.You can use a static variable with internal linkage to share data among functions found in just one file.")]),a._v(" "),t("h3",{attrs:{id:"cv-const-and-volatile"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cv-const-and-volatile","aria-hidden":"true"}},[a._v("#")]),a._v(" cv => const and volatile")]),a._v(" "),t("p",[a._v("volatile: compiler sometimes may use cache between context, so using volatile can specify do not using cache, since a variable may be modified by some hardware routine.")]),a._v(" "),t("h3",{attrs:{id:"namespace"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#namespace","aria-hidden":"true"}},[a._v("#")]),a._v(" namespace")]),a._v(" "),t("p",[t("em",[a._v("why do we need namespace?")])]),a._v(" "),t("p",[a._v("origional global scope => global namespace")]),a._v(" "),t("p",[a._v("namespace is open which means that we can add names to existing namespace.\n(some like redefine?)")]),a._v(" "),t("p",[a._v("Then it comes how to access namespace:\nuse "),t("code",[a._v("::")]),a._v(" scope-resolution operator")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("Jack::pair = 12.2;\nJill::Hill mole;\nJack::fetch();\n")])])]),t("h3",{attrs:{id:"using"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#using","aria-hidden":"true"}},[a._v("#")]),a._v(" using")]),a._v(" "),t("ul",[t("li",[a._v("using declaration => A using declaration adds a particular name to the declarative region in which it occurs.")]),a._v(" "),t("li",[a._v("using derective => make the whole(entire) namespace available")])]),a._v(" "),t("p",[a._v("For example:")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("namespace Jill {\n  double fetch;\n}\nchar fetch;\nint main () {\n  using Jill::fetch;  // put fetch into local namespace\n  cin >> fetch; // read into Jill::fetch\n  cin >> ::fetch; // read into global namespace fetch\n}\n")])])]),t("p",[a._v("a using declaration add the name to the local declaration region\navailable to its scope")]),a._v(" "),t("div",{staticClass:"language-c++ extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("using namespace std; // make std available in the global scope\n")])])]),t("p",[t("code",[a._v("using")]),a._v(" increases the possibility of name conflicts.")])])},[],!1,null,null,null);e.default=n.exports}}]);